// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: checks.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlterServicesClient is the client API for AlterServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlterServicesClient interface {
	CreateCheckService(ctx context.Context, in *CreateCheckRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteCheckService(ctx context.Context, in *DeleteCheckRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateCheckService(ctx context.Context, in *UpdateCheckRequest, opts ...grpc.CallOption) (*Response, error)
	CreatePageService(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*Response, error)
	DeletePageService(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*Response, error)
	UpdatePageService(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*Response, error)
}

type alterServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAlterServicesClient(cc grpc.ClientConnInterface) AlterServicesClient {
	return &alterServicesClient{cc}
}

func (c *alterServicesClient) CreateCheckService(ctx context.Context, in *CreateCheckRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alter.AlterServices/CreateCheckService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alterServicesClient) DeleteCheckService(ctx context.Context, in *DeleteCheckRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alter.AlterServices/DeleteCheckService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alterServicesClient) UpdateCheckService(ctx context.Context, in *UpdateCheckRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alter.AlterServices/UpdateCheckService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alterServicesClient) CreatePageService(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alter.AlterServices/CreatePageService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alterServicesClient) DeletePageService(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alter.AlterServices/DeletePageService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alterServicesClient) UpdatePageService(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alter.AlterServices/UpdatePageService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlterServicesServer is the server API for AlterServices service.
// All implementations must embed UnimplementedAlterServicesServer
// for forward compatibility
type AlterServicesServer interface {
	CreateCheckService(context.Context, *CreateCheckRequest) (*Response, error)
	DeleteCheckService(context.Context, *DeleteCheckRequest) (*Response, error)
	UpdateCheckService(context.Context, *UpdateCheckRequest) (*Response, error)
	CreatePageService(context.Context, *CreatePageRequest) (*Response, error)
	DeletePageService(context.Context, *DeletePageRequest) (*Response, error)
	UpdatePageService(context.Context, *UpdatePageRequest) (*Response, error)
	mustEmbedUnimplementedAlterServicesServer()
}

// UnimplementedAlterServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAlterServicesServer struct {
}

func (UnimplementedAlterServicesServer) CreateCheckService(context.Context, *CreateCheckRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckService not implemented")
}
func (UnimplementedAlterServicesServer) DeleteCheckService(context.Context, *DeleteCheckRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckService not implemented")
}
func (UnimplementedAlterServicesServer) UpdateCheckService(context.Context, *UpdateCheckRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckService not implemented")
}
func (UnimplementedAlterServicesServer) CreatePageService(context.Context, *CreatePageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePageService not implemented")
}
func (UnimplementedAlterServicesServer) DeletePageService(context.Context, *DeletePageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageService not implemented")
}
func (UnimplementedAlterServicesServer) UpdatePageService(context.Context, *UpdatePageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePageService not implemented")
}
func (UnimplementedAlterServicesServer) mustEmbedUnimplementedAlterServicesServer() {}

// UnsafeAlterServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlterServicesServer will
// result in compilation errors.
type UnsafeAlterServicesServer interface {
	mustEmbedUnimplementedAlterServicesServer()
}

func RegisterAlterServicesServer(s grpc.ServiceRegistrar, srv AlterServicesServer) {
	s.RegisterService(&AlterServices_ServiceDesc, srv)
}

func _AlterServices_CreateCheckService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlterServicesServer).CreateCheckService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alter.AlterServices/CreateCheckService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlterServicesServer).CreateCheckService(ctx, req.(*CreateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlterServices_DeleteCheckService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlterServicesServer).DeleteCheckService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alter.AlterServices/DeleteCheckService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlterServicesServer).DeleteCheckService(ctx, req.(*DeleteCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlterServices_UpdateCheckService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlterServicesServer).UpdateCheckService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alter.AlterServices/UpdateCheckService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlterServicesServer).UpdateCheckService(ctx, req.(*UpdateCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlterServices_CreatePageService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlterServicesServer).CreatePageService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alter.AlterServices/CreatePageService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlterServicesServer).CreatePageService(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlterServices_DeletePageService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlterServicesServer).DeletePageService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alter.AlterServices/DeletePageService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlterServicesServer).DeletePageService(ctx, req.(*DeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlterServices_UpdatePageService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlterServicesServer).UpdatePageService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alter.AlterServices/UpdatePageService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlterServicesServer).UpdatePageService(ctx, req.(*UpdatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlterServices_ServiceDesc is the grpc.ServiceDesc for AlterServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlterServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alter.AlterServices",
	HandlerType: (*AlterServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCheckService",
			Handler:    _AlterServices_CreateCheckService_Handler,
		},
		{
			MethodName: "DeleteCheckService",
			Handler:    _AlterServices_DeleteCheckService_Handler,
		},
		{
			MethodName: "UpdateCheckService",
			Handler:    _AlterServices_UpdateCheckService_Handler,
		},
		{
			MethodName: "CreatePageService",
			Handler:    _AlterServices_CreatePageService_Handler,
		},
		{
			MethodName: "DeletePageService",
			Handler:    _AlterServices_DeletePageService_Handler,
		},
		{
			MethodName: "UpdatePageService",
			Handler:    _AlterServices_UpdatePageService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checks.proto",
}
